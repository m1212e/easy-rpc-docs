import{S as Fl,i as Cl,s as Dl,U as Rt,v as J,w as ee,x as se,V as Tl,W as wl,f as ae,t as te,y as le,X as $l,k as t,q as i,a as B,l,m as n,h as a,r as c,c as y,n as v,b as d,D as s,Z as me,e as A,_ as he,E as Ee}from"../../../chunks/index-7ac94c92.js";import{P as kl}from"../../../chunks/Page-c0f2c207.js";import{C as ue}from"../../../chunks/Code-6d2e2b36.js";function xl(E){let r,m=`<pre class="shiki" style="background-color: #282c34; color: #abb2bf"><div class="language-id">erpc</div><div class='code-container'><code><div class='line'><span style="color: #E5C07B">Backend</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ping</span><span style="color: #ABB2BF">()</span></div></code></div></pre>`,f;return{c(){r=new me(!1),f=A(),this.h()},l(p){r=he(p,!1),f=A(),this.h()},h(){r.a=f},m(p,u){r.m(m,p,u),d(p,f,u)},p:Ee,d(p){p&&a(f),p&&r.d()}}}function Pl(E){let r,m=`<pre class="shiki" style="background-color: #282c34; color: #abb2bf"><div class="language-id">erpc</div><div class='code-container'><code><div class='line'><span style="color: #7F848E">// Endpoint with a parameter</span></div><div class='line'><span style="color: #E5C07B">Backend</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">logToServerConsole</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">message</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">string</span><span style="color: #ABB2BF">)</span></div><div class='line'></div><div class='line'><span style="color: #7F848E">// Endpoint with a return type</span></div><div class='line'><span style="color: #E5C07B">Backend</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">getCurrentTime</span><span style="color: #ABB2BF">() </span><span style="color: #C678DD">int32</span></div><div class='line'></div><div class='line'><span style="color: #7F848E">// Endpoint with a signle parameter and return type</span></div><div class='line'><span style="color: #E5C07B">Backend</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">echo</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">echoMessage</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">string</span><span style="color: #ABB2BF">) </span><span style="color: #C678DD">string</span></div><div class='line'></div><div class='line'><span style="color: #7F848E">// Endpoint with multiple parameters and a return type</span></div><div class='line'><span style="color: #E5C07B">Backend</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">sendMessageTo</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">message</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">string</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">userId</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">int</span><span style="color: #ABB2BF">) </span><span style="color: #C678DD">string</span></div></code></div></pre>`,f;return{c(){r=new me(!1),f=A(),this.h()},l(p){r=he(p,!1),f=A(),this.h()},h(){r.a=f},m(p,u){r.m(m,p,u),d(p,f,u)},p:Ee,d(p){p&&a(f),p&&r.d()}}}function gl(E){let r,m=`<pre class="shiki" style="background-color: #282c34; color: #abb2bf"><div class="language-id">erpc</div><div class='code-container'><code><div class='line'><span style="color: #E5C07B">Backend</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">example</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">enumParameter</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"example"</span><span style="color: #ABB2BF"> | </span><span style="color: #D19A66">420</span><span style="color: #ABB2BF"> | </span><span style="color: #D19A66">true</span><span style="color: #ABB2BF"> | </span><span style="color: #C678DD">string</span><span style="color: #ABB2BF"> | </span><span style="color: #E5C07B">MyCustomType</span><span style="color: #ABB2BF">) </span><span style="color: #98C379">"success"</span><span style="color: #ABB2BF"> | </span><span style="color: #98C379">"error"</span></div></code></div></pre>`,f;return{c(){r=new me(!1),f=A(),this.h()},l(p){r=he(p,!1),f=A(),this.h()},h(){r.a=f},m(p,u){r.m(m,p,u),d(p,f,u)},p:Ee,d(p){p&&a(f),p&&r.d()}}}function Sl(E){let r,m=`<pre class="shiki" style="background-color: #282c34; color: #abb2bf"><div class="language-id">erpc</div><div class='code-container'><code><div class='line'><span style="color: #C678DD">type</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ExampleType</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">field1</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">string</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">field2</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">"ex"</span><span style="color: #ABB2BF"> | </span><span style="color: #98C379">"ample"</span></div><div class='line'><span style="color: #ABB2BF">}</span></div><div class='line'></div><div class='line'><span style="color: #C678DD">type</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">AnotherType</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">field1</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">ExampleType</span></div><div class='line'><span style="color: #ABB2BF">}</span></div></code></div></pre>`,f;return{c(){r=new me(!1),f=A(),this.h()},l(p){r=he(p,!1),f=A(),this.h()},h(){r.a=f},m(p,u){r.m(m,p,u),d(p,f,u)},p:Ee,d(p){p&&a(f),p&&r.d()}}}function Hl(E){let r,m=`<pre class="shiki" style="background-color: #282c34; color: #abb2bf"><div class="language-id">erpc</div><div class='code-container'><code><div class='line'><span style="color: #C678DD">type</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Player</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">name</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">string</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">achievements</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">string</span><span style="color: #ABB2BF">[]</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">levelsCompleted</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">boolean</span><span style="color: #ABB2BF">[</span><span style="color: #D19A66">99</span><span style="color: #ABB2BF">]</span></div><div class='line'><span style="color: #ABB2BF">}</span></div></code></div></pre>`,f;return{c(){r=new me(!1),f=A(),this.h()},l(p){r=he(p,!1),f=A(),this.h()},h(){r.a=f},m(p,u){r.m(m,p,u),d(p,f,u)},p:Ee,d(p){p&&a(f),p&&r.d()}}}function Rl(E){let r,m=`<pre class="shiki" style="background-color: #282c34; color: #abb2bf"><div class="language-id">erpc</div><div class='code-container'><code><div class='line'><span style="color: #C678DD">type</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Player</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">name</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">string</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">secondName</span><span style="color: #ABB2BF">? </span><span style="color: #C678DD">string</span></div><div class='line'><span style="color: #ABB2BF">}</span></div><div class='line'><span style="color: #ABB2BF">  </span></div><div class='line'><span style="color: #E5C07B">Backend</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">exampleEndpoint</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">requiredParameter</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">string</span><span style="color: #ABB2BF">, </span><span style="color: #E5C07B">optionalParameter</span><span style="color: #ABB2BF">? </span><span style="color: #C678DD">string</span><span style="color: #ABB2BF">)</span></div></code></div></pre>`,f;return{c(){r=new me(!1),f=A(),this.h()},l(p){r=he(p,!1),f=A(),this.h()},h(){r.a=f},m(p,u){r.m(m,p,u),d(p,f,u)},p:Ee,d(p){p&&a(f),p&&r.d()}}}function Nl(E){let r,m=`<pre class="shiki" style="background-color: #282c34; color: #abb2bf"><div class="language-id">erpc</div><div class='code-container'><code><div class='line'><span style="color: #7F848E">/**</span></div><div class='line'><span style="color: #7F848E">    This represents a player of the game</span></div><div class='line'><span style="color: #7F848E">*/</span></div><div class='line'><span style="color: #C678DD">type</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">Player</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #7F848E">/**</span></div><div class='line'><span style="color: #7F848E">        This comment will be documentational</span></div><div class='line'><span style="color: #7F848E">    */</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">name</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">string</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #7F848E">/*</span></div><div class='line'><span style="color: #7F848E">        This one will be ignored</span></div><div class='line'><span style="color: #7F848E">    */</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">achievements</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">string</span><span style="color: #ABB2BF">[]</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #7F848E">// I'm going to be ignored</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #E5C07B">levelsCompleted</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">boolean</span><span style="color: #ABB2BF">[</span><span style="color: #D19A66">99</span><span style="color: #ABB2BF">]</span></div><div class='line'><span style="color: #ABB2BF">    </span><span style="color: #7F848E"># Me too</span></div><div class='line'><span style="color: #ABB2BF">}</span></div><div class='line'></div><div class='line'><span style="color: #7F848E">/**</span></div><div class='line'><span style="color: #7F848E">    This returns the player by their name</span></div><div class='line'><span style="color: #7F848E">*/</span></div><div class='line'><span style="color: #E5C07B">Backend</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">getPlayer</span><span style="color: #ABB2BF">(</span><span style="color: #E5C07B">name</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">string</span><span style="color: #ABB2BF">) </span><span style="color: #E5C07B">Player</span></div><div class='line'></div></code></div></pre>`,f;return{c(){r=new me(!1),f=A(),this.h()},l(p){r=he(p,!1),f=A(),this.h()},h(){r.a=f},m(p,u){r.m(m,p,u),d(p,f,u)},p:Ee,d(p){p&&a(f),p&&r.d()}}}function Ol(E){let r,m,f,p,u,b,_e,Es,Ae,$,ra,xe,pa,ia,Pe,be,ca,da,_s,C,D,ge,fa,As,$e,Ba,bs,T,$s,w,ya,Fe,va,ua,Fs,k,Cs,x,P,Se,ma,Ds,Ce,ha,Ts,g,S,He,Ea,ws,De,_a,ks,H,Re,ne,Ne,Aa,ba,Oe,$a,Fa,h,oe,qe,Ca,Da,R,Ta,Ie,wa,ka,Me,xa,Pa,re,je,ga,Sa,Ve,Ha,Ra,pe,ze,Na,Oa,Le,qa,Ia,ie,Ue,Ma,ja,Ge,Va,za,ce,Ke,La,Ua,Qe,Ga,Ka,de,We,Qa,Wa,Xe,Xa,Ya,fe,Ye,Za,Ja,Ze,et,st,Be,Je,at,tt,es,lt,nt,ye,ss,ot,rt,as,pt,it,ve,ts,ct,dt,ls,ft,xs,N,O,ns,Bt,Ps,q,yt,os,vt,ut,gs,I,Ss,M,j,rs,mt,Hs,Te,ht,Rs,V,Ns,z,L,ps,Et,Os,U,_t,is,At,bt,qs,G,Is,K,Q,cs,$t,Ms,we,Ft,js,W,Vs,X,Y,ds,Ct,zs,ke,Dt,Ls,Z,Us;return T=new ue({props:{filename:"example.erpc",$$slots:{default:[xl]},$$scope:{ctx:E}}}),k=new ue({props:{filename:"example.erpc",$$slots:{default:[Pl]},$$scope:{ctx:E}}}),I=new ue({props:{filename:"example.erpc",$$slots:{default:[gl]},$$scope:{ctx:E}}}),V=new ue({props:{filename:"example.erpc",$$slots:{default:[Sl]},$$scope:{ctx:E}}}),G=new ue({props:{filename:"example.erpc",$$slots:{default:[Hl]},$$scope:{ctx:E}}}),W=new ue({props:{filename:"example.erpc",$$slots:{default:[Rl]},$$scope:{ctx:E}}}),Z=new ue({props:{filename:"example.erpc",$$slots:{default:[Nl]},$$scope:{ctx:E}}}),{c(){r=t("h1"),m=t("a"),f=t("span"),p=i("easy-rpc Syntax"),u=B(),b=t("p"),_e=i("easy-rpc uses a custom declaration language to specify the endpoints. In this section this language will be explained."),Es=B(),Ae=t("blockquote"),$=t("p"),ra=i("If you are looking for available configuration options to configure the "),xe=t("code"),pa=i(".json"),ia=i(" files, see "),Pe=t("strong"),be=t("a"),ca=i("the configuration options"),da=i(".."),_s=B(),C=t("h2"),D=t("a"),ge=t("span"),fa=i("Endpoints"),As=B(),$e=t("p"),Ba=i("Endpoints allways consist of at least a role and a name. This is the absolute minumum for a valid endpoint:"),bs=B(),J(T.$$.fragment),$s=B(),w=t("p"),ya=i("Endpoints can have parameters and return types. These can be any valid "),Fe=t("a"),va=i("easy-rpc type"),ua=i("."),Fs=B(),J(k.$$.fragment),Cs=B(),x=t("h2"),P=t("a"),Se=t("span"),ma=i("Types"),Ds=B(),Ce=t("p"),ha=i("There are three kinds of types in easy-rpc."),Ts=B(),g=t("h3"),S=t("a"),He=t("span"),Ea=i("Primitive types"),ws=B(),De=t("p"),_a=i("As in many other languages, easy-rpc knows a fixed set of primitive types."),ks=B(),H=t("table"),Re=t("thead"),ne=t("tr"),Ne=t("th"),Aa=i("Identifier"),ba=B(),Oe=t("th"),$a=i("Description"),Fa=B(),h=t("tbody"),oe=t("tr"),qe=t("td"),Ca=i("boolean"),Da=B(),R=t("td"),Ta=i("A value which can be "),Ie=t("code"),wa=i("true"),ka=i(" or "),Me=t("code"),xa=i("false"),Pa=B(),re=t("tr"),je=t("td"),ga=i("int"),Sa=B(),Ve=t("td"),Ha=i("A whole number (16bit)"),Ra=B(),pe=t("tr"),ze=t("td"),Na=i("int8"),Oa=B(),Le=t("td"),qa=i("A whole number (8bit)"),Ia=B(),ie=t("tr"),Ue=t("td"),Ma=i("int16"),ja=B(),Ge=t("td"),Va=i("A whole number (16bit)"),za=B(),ce=t("tr"),Ke=t("td"),La=i("int32"),Ua=B(),Qe=t("td"),Ga=i("A whole number (32bit)"),Ka=B(),de=t("tr"),We=t("td"),Qa=i("int64"),Wa=B(),Xe=t("td"),Xa=i("A whole number (64bit)"),Ya=B(),fe=t("tr"),Ye=t("td"),Za=i("float"),Ja=B(),Ze=t("td"),et=i("A floating point number (32bit)"),st=B(),Be=t("tr"),Je=t("td"),at=i("float32"),tt=B(),es=t("td"),lt=i("A floating point number (32bit)"),nt=B(),ye=t("tr"),ss=t("td"),ot=i("float64"),rt=B(),as=t("td"),pt=i("A floating point number (64bit)"),it=B(),ve=t("tr"),ts=t("td"),ct=i("string"),dt=B(),ls=t("td"),ft=i("A string of characters"),xs=B(),N=t("h3"),O=t("a"),ns=t("span"),Bt=i("Enum types"),Ps=B(),q=t("p"),yt=i("An enum value is a value which is one of a fixed set. Values are separated by a "),os=t("code"),vt=i("|"),ut=i(". Any valid easy-rpc type can be used."),gs=B(),J(I.$$.fragment),Ss=B(),M=t("h3"),j=t("a"),rs=t("span"),mt=i("Custom types"),Hs=B(),Te=t("p"),ht=i("Custom types are user defined types consisting of other user defined types or primitive types."),Rs=B(),J(V.$$.fragment),Ns=B(),z=t("h3"),L=t("a"),ps=t("span"),Et=i("Arrays"),Os=B(),U=t("p"),_t=i("Primitive or user defined types can be arrays. Arrays are marked via a "),is=t("code"),At=i("[]"),bt=i(" behind the type. Arrays can have a fixed size."),qs=B(),J(G.$$.fragment),Is=B(),K=t("h3"),Q=t("a"),cs=t("span"),$t=i("Optionals"),Ms=B(),we=t("p"),Ft=i("Fields and parameters can be optional. This indicates, that the field or parameter might not be set. To mark a field or parameter as optional, suffix it with a questionmark"),js=B(),J(W.$$.fragment),Vs=B(),X=t("h3"),Y=t("a"),ds=t("span"),Ct=i("Comments"),zs=B(),ke=t("p"),Dt=i("easy-rpc allows for two kinds of comments: Disposeable and documentational. Disposeable comments are ignored while transpiling. Documentational comments are transferred into the generated types and methods."),Ls=B(),J(Z.$$.fragment),this.h()},l(e){r=l(e,"H1",{id:!0});var o=n(r);m=l(o,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var fs=n(m);f=l(fs,"SPAN",{class:!0}),n(f).forEach(a),fs.forEach(a),p=c(o,"easy-rpc Syntax"),o.forEach(a),u=y(e),b=l(e,"P",{});var Bs=n(b);_e=c(Bs,"easy-rpc uses a custom declaration language to specify the endpoints. In this section this language will be explained."),Bs.forEach(a),Es=y(e),Ae=l(e,"BLOCKQUOTE",{});var ys=n(Ae);$=l(ys,"P",{});var F=n($);ra=c(F,"If you are looking for available configuration options to configure the "),xe=l(F,"CODE",{});var vs=n(xe);pa=c(vs,".json"),vs.forEach(a),ia=c(F," files, see "),Pe=l(F,"STRONG",{});var us=n(Pe);be=l(us,"A",{href:!0});var ms=n(be);ca=c(ms,"the configuration options"),ms.forEach(a),us.forEach(a),da=c(F,".."),F.forEach(a),ys.forEach(a),_s=y(e),C=l(e,"H2",{id:!0});var Tt=n(C);D=l(Tt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Nt=n(D);ge=l(Nt,"SPAN",{class:!0}),n(ge).forEach(a),Nt.forEach(a),fa=c(Tt,"Endpoints"),Tt.forEach(a),As=y(e),$e=l(e,"P",{});var Ot=n($e);Ba=c(Ot,"Endpoints allways consist of at least a role and a name. This is the absolute minumum for a valid endpoint:"),Ot.forEach(a),bs=y(e),ee(T.$$.fragment,e),$s=y(e),w=l(e,"P",{});var Gs=n(w);ya=c(Gs,"Endpoints can have parameters and return types. These can be any valid "),Fe=l(Gs,"A",{href:!0});var qt=n(Fe);va=c(qt,"easy-rpc type"),qt.forEach(a),ua=c(Gs,"."),Gs.forEach(a),Fs=y(e),ee(k.$$.fragment,e),Cs=y(e),x=l(e,"H2",{id:!0});var wt=n(x);P=l(wt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var It=n(P);Se=l(It,"SPAN",{class:!0}),n(Se).forEach(a),It.forEach(a),ma=c(wt,"Types"),wt.forEach(a),Ds=y(e),Ce=l(e,"P",{});var Mt=n(Ce);ha=c(Mt,"There are three kinds of types in easy-rpc."),Mt.forEach(a),Ts=y(e),g=l(e,"H3",{id:!0});var kt=n(g);S=l(kt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var jt=n(S);He=l(jt,"SPAN",{class:!0}),n(He).forEach(a),jt.forEach(a),Ea=c(kt,"Primitive types"),kt.forEach(a),ws=y(e),De=l(e,"P",{});var Vt=n(De);_a=c(Vt,"As in many other languages, easy-rpc knows a fixed set of primitive types."),Vt.forEach(a),ks=y(e),H=l(e,"TABLE",{});var Ks=n(H);Re=l(Ks,"THEAD",{});var zt=n(Re);ne=l(zt,"TR",{});var Qs=n(ne);Ne=l(Qs,"TH",{});var Lt=n(Ne);Aa=c(Lt,"Identifier"),Lt.forEach(a),ba=y(Qs),Oe=l(Qs,"TH",{});var Ut=n(Oe);$a=c(Ut,"Description"),Ut.forEach(a),Qs.forEach(a),zt.forEach(a),Fa=y(Ks),h=l(Ks,"TBODY",{});var _=n(h);oe=l(_,"TR",{});var Ws=n(oe);qe=l(Ws,"TD",{});var Gt=n(qe);Ca=c(Gt,"boolean"),Gt.forEach(a),Da=y(Ws),R=l(Ws,"TD",{});var hs=n(R);Ta=c(hs,"A value which can be "),Ie=l(hs,"CODE",{});var Kt=n(Ie);wa=c(Kt,"true"),Kt.forEach(a),ka=c(hs," or "),Me=l(hs,"CODE",{});var Qt=n(Me);xa=c(Qt,"false"),Qt.forEach(a),hs.forEach(a),Ws.forEach(a),Pa=y(_),re=l(_,"TR",{});var Xs=n(re);je=l(Xs,"TD",{});var Wt=n(je);ga=c(Wt,"int"),Wt.forEach(a),Sa=y(Xs),Ve=l(Xs,"TD",{});var Xt=n(Ve);Ha=c(Xt,"A whole number (16bit)"),Xt.forEach(a),Xs.forEach(a),Ra=y(_),pe=l(_,"TR",{});var Ys=n(pe);ze=l(Ys,"TD",{});var Yt=n(ze);Na=c(Yt,"int8"),Yt.forEach(a),Oa=y(Ys),Le=l(Ys,"TD",{});var Zt=n(Le);qa=c(Zt,"A whole number (8bit)"),Zt.forEach(a),Ys.forEach(a),Ia=y(_),ie=l(_,"TR",{});var Zs=n(ie);Ue=l(Zs,"TD",{});var Jt=n(Ue);Ma=c(Jt,"int16"),Jt.forEach(a),ja=y(Zs),Ge=l(Zs,"TD",{});var el=n(Ge);Va=c(el,"A whole number (16bit)"),el.forEach(a),Zs.forEach(a),za=y(_),ce=l(_,"TR",{});var Js=n(ce);Ke=l(Js,"TD",{});var sl=n(Ke);La=c(sl,"int32"),sl.forEach(a),Ua=y(Js),Qe=l(Js,"TD",{});var al=n(Qe);Ga=c(al,"A whole number (32bit)"),al.forEach(a),Js.forEach(a),Ka=y(_),de=l(_,"TR",{});var ea=n(de);We=l(ea,"TD",{});var tl=n(We);Qa=c(tl,"int64"),tl.forEach(a),Wa=y(ea),Xe=l(ea,"TD",{});var ll=n(Xe);Xa=c(ll,"A whole number (64bit)"),ll.forEach(a),ea.forEach(a),Ya=y(_),fe=l(_,"TR",{});var sa=n(fe);Ye=l(sa,"TD",{});var nl=n(Ye);Za=c(nl,"float"),nl.forEach(a),Ja=y(sa),Ze=l(sa,"TD",{});var ol=n(Ze);et=c(ol,"A floating point number (32bit)"),ol.forEach(a),sa.forEach(a),st=y(_),Be=l(_,"TR",{});var aa=n(Be);Je=l(aa,"TD",{});var rl=n(Je);at=c(rl,"float32"),rl.forEach(a),tt=y(aa),es=l(aa,"TD",{});var pl=n(es);lt=c(pl,"A floating point number (32bit)"),pl.forEach(a),aa.forEach(a),nt=y(_),ye=l(_,"TR",{});var ta=n(ye);ss=l(ta,"TD",{});var il=n(ss);ot=c(il,"float64"),il.forEach(a),rt=y(ta),as=l(ta,"TD",{});var cl=n(as);pt=c(cl,"A floating point number (64bit)"),cl.forEach(a),ta.forEach(a),it=y(_),ve=l(_,"TR",{});var la=n(ve);ts=l(la,"TD",{});var dl=n(ts);ct=c(dl,"string"),dl.forEach(a),dt=y(la),ls=l(la,"TD",{});var fl=n(ls);ft=c(fl,"A string of characters"),fl.forEach(a),la.forEach(a),_.forEach(a),Ks.forEach(a),xs=y(e),N=l(e,"H3",{id:!0});var xt=n(N);O=l(xt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Bl=n(O);ns=l(Bl,"SPAN",{class:!0}),n(ns).forEach(a),Bl.forEach(a),Bt=c(xt,"Enum types"),xt.forEach(a),Ps=y(e),q=l(e,"P",{});var na=n(q);yt=c(na,"An enum value is a value which is one of a fixed set. Values are separated by a "),os=l(na,"CODE",{});var yl=n(os);vt=c(yl,"|"),yl.forEach(a),ut=c(na,". Any valid easy-rpc type can be used."),na.forEach(a),gs=y(e),ee(I.$$.fragment,e),Ss=y(e),M=l(e,"H3",{id:!0});var Pt=n(M);j=l(Pt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var vl=n(j);rs=l(vl,"SPAN",{class:!0}),n(rs).forEach(a),vl.forEach(a),mt=c(Pt,"Custom types"),Pt.forEach(a),Hs=y(e),Te=l(e,"P",{});var ul=n(Te);ht=c(ul,"Custom types are user defined types consisting of other user defined types or primitive types."),ul.forEach(a),Rs=y(e),ee(V.$$.fragment,e),Ns=y(e),z=l(e,"H3",{id:!0});var gt=n(z);L=l(gt,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ml=n(L);ps=l(ml,"SPAN",{class:!0}),n(ps).forEach(a),ml.forEach(a),Et=c(gt,"Arrays"),gt.forEach(a),Os=y(e),U=l(e,"P",{});var oa=n(U);_t=c(oa,"Primitive or user defined types can be arrays. Arrays are marked via a "),is=l(oa,"CODE",{});var hl=n(is);At=c(hl,"[]"),hl.forEach(a),bt=c(oa," behind the type. Arrays can have a fixed size."),oa.forEach(a),qs=y(e),ee(G.$$.fragment,e),Is=y(e),K=l(e,"H3",{id:!0});var St=n(K);Q=l(St,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var El=n(Q);cs=l(El,"SPAN",{class:!0}),n(cs).forEach(a),El.forEach(a),$t=c(St,"Optionals"),St.forEach(a),Ms=y(e),we=l(e,"P",{});var _l=n(we);Ft=c(_l,"Fields and parameters can be optional. This indicates, that the field or parameter might not be set. To mark a field or parameter as optional, suffix it with a questionmark"),_l.forEach(a),js=y(e),ee(W.$$.fragment,e),Vs=y(e),X=l(e,"H3",{id:!0});var Ht=n(X);Y=l(Ht,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Al=n(Y);ds=l(Al,"SPAN",{class:!0}),n(ds).forEach(a),Al.forEach(a),Ct=c(Ht,"Comments"),Ht.forEach(a),zs=y(e),ke=l(e,"P",{});var bl=n(ke);Dt=c(bl,"easy-rpc allows for two kinds of comments: Disposeable and documentational. Disposeable comments are ignored while transpiling. Documentational comments are transferred into the generated types and methods."),bl.forEach(a),Ls=y(e),ee(Z.$$.fragment,e),this.h()},h(){v(f,"class","icon icon-link"),v(m,"aria-hidden","true"),v(m,"tabindex","-1"),v(m,"href","#easy-rpc-syntax"),v(r,"id","easy-rpc-syntax"),v(be,"href","/easy-rpc-docs/5%E2%9A%99%EF%B8%8F%20Configuration"),v(ge,"class","icon icon-link"),v(D,"aria-hidden","true"),v(D,"tabindex","-1"),v(D,"href","#endpoints"),v(C,"id","endpoints"),v(Fe,"href","#Types"),v(Se,"class","icon icon-link"),v(P,"aria-hidden","true"),v(P,"tabindex","-1"),v(P,"href","#types"),v(x,"id","types"),v(He,"class","icon icon-link"),v(S,"aria-hidden","true"),v(S,"tabindex","-1"),v(S,"href","#primitive-types"),v(g,"id","primitive-types"),v(ns,"class","icon icon-link"),v(O,"aria-hidden","true"),v(O,"tabindex","-1"),v(O,"href","#enum-types"),v(N,"id","enum-types"),v(rs,"class","icon icon-link"),v(j,"aria-hidden","true"),v(j,"tabindex","-1"),v(j,"href","#custom-types"),v(M,"id","custom-types"),v(ps,"class","icon icon-link"),v(L,"aria-hidden","true"),v(L,"tabindex","-1"),v(L,"href","#arrays"),v(z,"id","arrays"),v(cs,"class","icon icon-link"),v(Q,"aria-hidden","true"),v(Q,"tabindex","-1"),v(Q,"href","#optionals"),v(K,"id","optionals"),v(ds,"class","icon icon-link"),v(Y,"aria-hidden","true"),v(Y,"tabindex","-1"),v(Y,"href","#comments"),v(X,"id","comments")},m(e,o){d(e,r,o),s(r,m),s(m,f),s(r,p),d(e,u,o),d(e,b,o),s(b,_e),d(e,Es,o),d(e,Ae,o),s(Ae,$),s($,ra),s($,xe),s(xe,pa),s($,ia),s($,Pe),s(Pe,be),s(be,ca),s($,da),d(e,_s,o),d(e,C,o),s(C,D),s(D,ge),s(C,fa),d(e,As,o),d(e,$e,o),s($e,Ba),d(e,bs,o),se(T,e,o),d(e,$s,o),d(e,w,o),s(w,ya),s(w,Fe),s(Fe,va),s(w,ua),d(e,Fs,o),se(k,e,o),d(e,Cs,o),d(e,x,o),s(x,P),s(P,Se),s(x,ma),d(e,Ds,o),d(e,Ce,o),s(Ce,ha),d(e,Ts,o),d(e,g,o),s(g,S),s(S,He),s(g,Ea),d(e,ws,o),d(e,De,o),s(De,_a),d(e,ks,o),d(e,H,o),s(H,Re),s(Re,ne),s(ne,Ne),s(Ne,Aa),s(ne,ba),s(ne,Oe),s(Oe,$a),s(H,Fa),s(H,h),s(h,oe),s(oe,qe),s(qe,Ca),s(oe,Da),s(oe,R),s(R,Ta),s(R,Ie),s(Ie,wa),s(R,ka),s(R,Me),s(Me,xa),s(h,Pa),s(h,re),s(re,je),s(je,ga),s(re,Sa),s(re,Ve),s(Ve,Ha),s(h,Ra),s(h,pe),s(pe,ze),s(ze,Na),s(pe,Oa),s(pe,Le),s(Le,qa),s(h,Ia),s(h,ie),s(ie,Ue),s(Ue,Ma),s(ie,ja),s(ie,Ge),s(Ge,Va),s(h,za),s(h,ce),s(ce,Ke),s(Ke,La),s(ce,Ua),s(ce,Qe),s(Qe,Ga),s(h,Ka),s(h,de),s(de,We),s(We,Qa),s(de,Wa),s(de,Xe),s(Xe,Xa),s(h,Ya),s(h,fe),s(fe,Ye),s(Ye,Za),s(fe,Ja),s(fe,Ze),s(Ze,et),s(h,st),s(h,Be),s(Be,Je),s(Je,at),s(Be,tt),s(Be,es),s(es,lt),s(h,nt),s(h,ye),s(ye,ss),s(ss,ot),s(ye,rt),s(ye,as),s(as,pt),s(h,it),s(h,ve),s(ve,ts),s(ts,ct),s(ve,dt),s(ve,ls),s(ls,ft),d(e,xs,o),d(e,N,o),s(N,O),s(O,ns),s(N,Bt),d(e,Ps,o),d(e,q,o),s(q,yt),s(q,os),s(os,vt),s(q,ut),d(e,gs,o),se(I,e,o),d(e,Ss,o),d(e,M,o),s(M,j),s(j,rs),s(M,mt),d(e,Hs,o),d(e,Te,o),s(Te,ht),d(e,Rs,o),se(V,e,o),d(e,Ns,o),d(e,z,o),s(z,L),s(L,ps),s(z,Et),d(e,Os,o),d(e,U,o),s(U,_t),s(U,is),s(is,At),s(U,bt),d(e,qs,o),se(G,e,o),d(e,Is,o),d(e,K,o),s(K,Q),s(Q,cs),s(K,$t),d(e,Ms,o),d(e,we,o),s(we,Ft),d(e,js,o),se(W,e,o),d(e,Vs,o),d(e,X,o),s(X,Y),s(Y,ds),s(X,Ct),d(e,zs,o),d(e,ke,o),s(ke,Dt),d(e,Ls,o),se(Z,e,o),Us=!0},p(e,o){const fs={};o&2&&(fs.$$scope={dirty:o,ctx:e}),T.$set(fs);const Bs={};o&2&&(Bs.$$scope={dirty:o,ctx:e}),k.$set(Bs);const ys={};o&2&&(ys.$$scope={dirty:o,ctx:e}),I.$set(ys);const F={};o&2&&(F.$$scope={dirty:o,ctx:e}),V.$set(F);const vs={};o&2&&(vs.$$scope={dirty:o,ctx:e}),G.$set(vs);const us={};o&2&&(us.$$scope={dirty:o,ctx:e}),W.$set(us);const ms={};o&2&&(ms.$$scope={dirty:o,ctx:e}),Z.$set(ms)},i(e){Us||(ae(T.$$.fragment,e),ae(k.$$.fragment,e),ae(I.$$.fragment,e),ae(V.$$.fragment,e),ae(G.$$.fragment,e),ae(W.$$.fragment,e),ae(Z.$$.fragment,e),Us=!0)},o(e){te(T.$$.fragment,e),te(k.$$.fragment,e),te(I.$$.fragment,e),te(V.$$.fragment,e),te(G.$$.fragment,e),te(W.$$.fragment,e),te(Z.$$.fragment,e),Us=!1},d(e){e&&a(r),e&&a(u),e&&a(b),e&&a(Es),e&&a(Ae),e&&a(_s),e&&a(C),e&&a(As),e&&a($e),e&&a(bs),le(T,e),e&&a($s),e&&a(w),e&&a(Fs),le(k,e),e&&a(Cs),e&&a(x),e&&a(Ds),e&&a(Ce),e&&a(Ts),e&&a(g),e&&a(ws),e&&a(De),e&&a(ks),e&&a(H),e&&a(xs),e&&a(N),e&&a(Ps),e&&a(q),e&&a(gs),le(I,e),e&&a(Ss),e&&a(M),e&&a(Hs),e&&a(Te),e&&a(Rs),le(V,e),e&&a(Ns),e&&a(z),e&&a(Os),e&&a(U),e&&a(qs),le(G,e),e&&a(Is),e&&a(K),e&&a(Ms),e&&a(we),e&&a(js),le(W,e),e&&a(Vs),e&&a(X),e&&a(zs),e&&a(ke),e&&a(Ls),le(Z,e)}}}function ql(E){let r,m;const f=[E[0]];let p={$$slots:{default:[Ol]},$$scope:{ctx:E}};for(let u=0;u<f.length;u+=1)p=Rt(p,f[u]);return r=new kl({props:p}),{c(){J(r.$$.fragment)},l(u){ee(r.$$.fragment,u)},m(u,b){se(r,u,b),m=!0},p(u,[b]){const _e=b&1?Tl(f,[wl(u[0])]):{};b&2&&(_e.$$scope={dirty:b,ctx:u}),r.$set(_e)},i(u){m||(ae(r.$$.fragment,u),m=!0)},o(u){te(r.$$.fragment,u),m=!1},d(u){le(r,u)}}}function Il(E,r,m){return E.$$set=f=>{m(0,r=Rt(Rt({},r),$l(f)))},r=$l(r),[r]}class zl extends Fl{constructor(r){super(),Cl(this,r,Il,ql,Dl,{})}}export{zl as default};
