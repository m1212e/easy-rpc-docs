import{S as _e,i as De,s as $e,U as ie,v as os,w as ts,x as ps,V as Pe,W as xe,f as rs,t as cs,y as is,X as ke,k as c,q as d,a as v,l as i,m as B,h as e,r as y,c as F,n as h,b as t,D as l,Z as Is,e as S,_ as qs,E as Ss}from"../../../../chunks/index-7ac94c92.js";import{P as Ne}from"../../../../chunks/Page-c0f2c207.js";import{C as Ns}from"../../../../chunks/Code-6d2e2b36.js";function Ie(A){let a,f=`<pre class="shiki" style="background-color: #282c34; color: #abb2bf"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #7F848E">/*</span></div><div class='line'><span style="color: #7F848E">    first, we import the Backend class from the generated directory</span></div><div class='line'><span style="color: #7F848E">*/</span></div><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">Backend</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'./.erpc/generated/Backend'</span><span style="color: #ABB2BF">;</span></div><div class='line'></div><div class='line'><span style="color: #7F848E">/*</span></div><div class='line'><span style="color: #7F848E">    Now we instantiate a server. The parameter object allows us to configure the server. Depending on the role the configuration options might differ.</span></div><div class='line'><span style="color: #7F848E">    As a second parameter we could pass callback handlers, but this is optional. We will set the handlers later. Passing them as a parameter on creation has an advantage tough:</span></div><div class='line'><span style="color: #7F848E">    TypeScript will let you know if a handler is not implemented since the types wont match. If this is important to you, you can decide to pass the handlers on creation.</span></div><div class='line'><span style="color: #7F848E">*/</span></div><div class='line'><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">backend</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Backend</span><span style="color: #ABB2BF">(</span></div><div class='line'><span style="color: #ABB2BF">	{</span></div><div class='line'><span style="color: #ABB2BF">		</span><span style="color: #E06C75">allowedCorsOrigins</span><span style="color: #ABB2BF">: [</span><span style="color: #98C379">'*'</span><span style="color: #ABB2BF">],</span></div><div class='line'><span style="color: #ABB2BF">		</span><span style="color: #E06C75">port</span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">1234</span></div><div class='line'><span style="color: #ABB2BF">	} </span><span style="color: #7F848E">/*, { handlers could go here }*/</span></div><div class='line'><span style="color: #ABB2BF">);</span></div><div class='line'></div><div class='line'><span style="color: #7F848E">/*</span></div><div class='line'><span style="color: #7F848E">  After we created a server object, we now want to register a handler to process incoming requests. Since we defined the endpoint in api.erpc it will live at the .api namespace on out backend object.</span></div><div class='line'><span style="color: #7F848E">*/</span></div><div class='line'><span style="color: #E5C07B">backend</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">api</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">ping</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">async</span><span style="color: #ABB2BF"> (</span><span style="color: #E06C75">msg</span><span style="color: #ABB2BF">) </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">console</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">log</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">'incoming ping request: '</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">msg</span><span style="color: #ABB2BF">);</span></div><div class='line'><span style="color: #ABB2BF">	</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'PONG'</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #ABB2BF">};</span></div><div class='line'></div><div class='line'><span style="color: #7F848E">/*</span></div><div class='line'><span style="color: #7F848E">  After registering all our handlers, we can start the server.</span></div><div class='line'><span style="color: #7F848E">*/</span></div><div class='line'><span style="color: #E5C07B">backend</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">run</span><span style="color: #ABB2BF">();</span></div></code></div></pre>`,p;return{c(){a=new Is(!1),p=S(),this.h()},l(o){a=qs(o,!1),p=S(),this.h()},h(){a.a=p},m(o,r){a.m(f,o,r),t(o,p,r)},p:Ss,d(o){o&&e(p),o&&a.d()}}}function qe(A){let a,f=`<pre class="shiki" style="background-color: #282c34; color: #abb2bf"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #7F848E">/*</span></div><div class='line'><span style="color: #7F848E">    import the backend class</span></div><div class='line'><span style="color: #7F848E">*/</span></div><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">Backend</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'../.erpc/generated/Backend'</span><span style="color: #ABB2BF">;</span></div><div class='line'></div><div class='line'><span style="color: #7F848E">/*</span></div><div class='line'><span style="color: #7F848E">  Now we instantiate the target. In our case it lives on the local machine and listens to the 1234 port, which we configured earlier in the backend code.</span></div><div class='line'><span style="color: #7F848E">*/</span></div><div class='line'><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">backend</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Backend</span><span style="color: #ABB2BF">({</span></div><div class='line'><span style="color: #ABB2BF">	</span><span style="color: #E06C75">address</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">'http://localhost'</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">	</span><span style="color: #E06C75">port</span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">1234</span></div><div class='line'><span style="color: #ABB2BF">});</span></div><div class='line'></div><div class='line'><span style="color: #7F848E">/*</span></div><div class='line'><span style="color: #7F848E">    After creating the target we can send requests to it. Just as we declared the handler on the backend object, now we call it on the backend object and await the response.</span></div><div class='line'><span style="color: #7F848E">*/</span></div><div class='line'><span style="color: #E5C07B">console</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">log</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">await</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">backend</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">api</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">ping</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">'PING'</span><span style="color: #ABB2BF">));</span></div></code></div></pre>`,p;return{c(){a=new Is(!1),p=S(),this.h()},l(o){a=qs(o,!1),p=S(),this.h()},h(){a.a=p},m(o,r){a.m(f,o,r),t(o,p,r)},p:Ss,d(o){o&&e(p),o&&a.d()}}}function Se(A){let a,f=`<pre class="shiki" style="background-color: #282c34; color: #abb2bf"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">Backend</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'./.erpc/generated/Backend'</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">backend</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Backend</span><span style="color: #ABB2BF">({</span></div><div class='line'><span style="color: #ABB2BF">	</span><span style="color: #E06C75">allowedCorsOrigins</span><span style="color: #ABB2BF">: [</span><span style="color: #98C379">'*'</span><span style="color: #ABB2BF">],</span></div><div class='line'><span style="color: #ABB2BF">	</span><span style="color: #E06C75">port</span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">1234</span></div><div class='line'><span style="color: #ABB2BF">});</span></div><div class='line'></div><div class='line'><span style="color: #E5C07B">backend</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">api</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">ping</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">async</span><span style="color: #ABB2BF"> (</span><span style="color: #E06C75">msg</span><span style="color: #ABB2BF">) </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">console</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">log</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">'incoming ping request: '</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">msg</span><span style="color: #ABB2BF">);</span></div><div class='line'><span style="color: #ABB2BF">	</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'PONG'</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #ABB2BF">};</span></div><div class='line'></div><div class='line'><span style="color: #7F848E">/*</span></div><div class='line'><span style="color: #7F848E">  We can register a callback to run whenever a client connects to our server. The callback gets the browser as a parameter, so you can perform calls on the target.</span></div><div class='line'><span style="color: #7F848E">*/</span></div><div class='line'><span style="color: #E5C07B">backend</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">onConnection</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">async</span><span style="color: #ABB2BF"> (</span><span style="color: #E06C75">target</span><span style="color: #ABB2BF">) </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">console</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">log</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">'Frontend connected!'</span><span style="color: #ABB2BF">);</span></div><div class='line'><span style="color: #ABB2BF">	</span><span style="color: #7F848E">// this calls the ping method on the frontend and awaits the result</span></div><div class='line'><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">console</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">log</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">await</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">target</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">api</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">ping</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">'PING'</span><span style="color: #ABB2BF">));</span></div><div class='line'><span style="color: #ABB2BF">});</span></div><div class='line'></div><div class='line'><span style="color: #E5C07B">backend</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">run</span><span style="color: #ABB2BF">();</span></div></code></div></pre>`,p;return{c(){a=new Is(!1),p=S(),this.h()},l(o){a=qs(o,!1),p=S(),this.h()},h(){a.a=p},m(o,r){a.m(f,o,r),t(o,p,r)},p:Ss,d(o){o&&e(p),o&&a.d()}}}function je(A){let a,f=`<pre class="shiki" style="background-color: #282c34; color: #abb2bf"><div class="language-id">ts</div><div class='code-container'><code><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">Backend</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'../.erpc/generated/Backend'</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #7F848E">/*</span></div><div class='line'><span style="color: #7F848E">  To do this, we need to import the frontend class</span></div><div class='line'><span style="color: #7F848E">*/</span></div><div class='line'><span style="color: #C678DD">import</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">Frontend</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">from</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'../.erpc/generated/Frontend'</span><span style="color: #ABB2BF">;</span></div><div class='line'></div><div class='line'><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">backend</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Backend</span><span style="color: #ABB2BF">({</span></div><div class='line'><span style="color: #ABB2BF">	</span><span style="color: #E06C75">address</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">'http://localhost'</span><span style="color: #ABB2BF">,</span></div><div class='line'><span style="color: #ABB2BF">	</span><span style="color: #E06C75">port</span><span style="color: #ABB2BF">: </span><span style="color: #D19A66">1234</span></div><div class='line'><span style="color: #ABB2BF">});</span></div><div class='line'></div><div class='line'><span style="color: #E5C07B">console</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">log</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">await</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">backend</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">api</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">ping</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">'PING'</span><span style="color: #ABB2BF">));</span></div><div class='line'></div><div class='line'><span style="color: #7F848E">/*</span></div><div class='line'><span style="color: #7F848E">  Creating a frontend instance to register the handlers on</span></div><div class='line'><span style="color: #7F848E">*/</span></div><div class='line'><span style="color: #C678DD">const</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">frontend</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">new</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">Frontend</span><span style="color: #ABB2BF">({});</span></div><div class='line'><span style="color: #E5C07B">frontend</span><span style="color: #ABB2BF">.</span><span style="color: #E5C07B">api</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">ping</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">=</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">async</span><span style="color: #ABB2BF"> (</span><span style="color: #E06C75">msg</span><span style="color: #ABB2BF">) </span><span style="color: #C678DD">=&gt;</span><span style="color: #ABB2BF"> {</span></div><div class='line'><span style="color: #ABB2BF">	</span><span style="color: #E5C07B">console</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">log</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">'incoming ping request: '</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">+</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">msg</span><span style="color: #ABB2BF">);</span></div><div class='line'><span style="color: #ABB2BF">	</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">'PONG'</span><span style="color: #ABB2BF">;</span></div><div class='line'><span style="color: #ABB2BF">};</span></div><div class='line'></div><div class='line'><span style="color: #E5C07B">server</span><span style="color: #ABB2BF">.</span><span style="color: #61AFEF">start</span><span style="color: #ABB2BF">();</span></div></code></div></pre>`,p;return{c(){a=new Is(!1),p=S(),this.h()},l(o){a=qs(o,!1),p=S(),this.h()},h(){a.a=p},m(o,r){a.m(f,o,r),t(o,p,r)},p:Ss,d(o){o&&e(p),o&&a.d()}}}function Oe(A){let a,f,p,o,r,u,O,X,T,js,Os,Bs,E,w,Z,Ts,ds,C,Ws,z,Gs,Hs,ys,g,b,K,Ys,hs,m,Vs,L,Js,Rs,M,Us,Xs,fs,k,vs,W,Zs,Fs,_,D,Q,zs,As,G,Ks,us,$,ms,H,Ls,Es,P,x,ss,Ms,ws,N,Qs,es,se,ee,Cs,Y,ne,gs,V,ae,bs,I,ks,J,le,_s,q,Ds,R,oe,$s;return k=new Ns({props:{filename:"/webapp/backend/main.ts",$$slots:{default:[Ie]},$$scope:{ctx:A}}}),$=new Ns({props:{filename:"/webapp/frontend/src/main.ts",$$slots:{default:[qe]},$$scope:{ctx:A}}}),I=new Ns({props:{filename:"/webapp/backend/main.ts",$$slots:{default:[Se]},$$scope:{ctx:A}}}),q=new Ns({props:{filename:"/webapp/frontend/src/main.ts",$$slots:{default:[je]},$$scope:{ctx:A}}}),{c(){a=c("h1"),f=c("a"),p=c("span"),o=d("Working with easy-rpc"),r=v(),u=c("p"),O=d(`After you set up an easy-rpc project or cloned a template/existing project it is very easy to get started working with easy-rpc.
If you followed the manual setup from the previous step you probably already have the Vscode extension installed or downloaded the transpiler binary. If this is not the case, make sure to `),X=c("strong"),T=c("a"),js=d("setup the transpiler"),Os=d(" first."),Bs=v(),E=c("h2"),w=c("a"),Z=c("span"),Ts=d(".erpc"),ds=v(),C=c("p"),Ws=d("The .erpc directory is where the actual magic happens. Whenever the running transpiler detects changes to your source files, it will generate the code required and put it into the "),z=c("code"),Gs=d(".erpc/generated"),Hs=d(" directory. You can import the generated clients from this directory, make calls on them or register handlers for incoming calls. The following examples refer to the manual setup from the previous section. If something is unclear, make sure to read it."),ys=v(),g=c("h2"),b=c("a"),K=c("span"),Ys=d("Backend"),hs=v(),m=c("p"),Vs=d("While setting up our project we configured two roles: \u201CFrontend\u201D and \u201CBackend\u201D. The first is a browser which has one endpoint, the second is an http-server which also has one endpoint. First we want to make sure that we can answer incoming requests on the backend. As you might remember, we declared a ping endpoint on the backend in our "),L=c("code"),Js=d("/webapp/sources/api.erpc"),Rs=d(", which takes a string parameter and returns a string: "),M=c("code"),Us=d("Backend ping(msg string) string"),Xs=d(". Now lets implement the handler for this endpoint."),fs=v(),os(k.$$.fragment),vs=v(),W=c("p"),Zs=d("If you run the app with the start script you should now see a console message which confirms the server is listening on the configured port."),Fs=v(),_=c("h2"),D=c("a"),Q=c("span"),zs=d("Frontend"),As=v(),G=c("p"),Ks=d("Now we want to call the backend endpoint from the frontend."),us=v(),os($.$$.fragment),ms=v(),H=c("p"),Ls=d("After starting the webapp and opening the browser, take a look at the console to see the reponse from the backend logged."),Es=v(),P=c("h2"),x=c("a"),ss=c("span"),Ms=d("Frontend endpoints"),ws=v(),N=c("p"),Qs=d("You might now wonder how you can use the second endpoint which we defined in the sources, the one on the frontend: "),es=c("code"),se=d("Frontend ping(msg string) string"),ee=d(". It too has one string parameter and a string return. But this time, the frontend is the role offering this endpoint."),Cs=v(),Y=c("p"),ne=d("Calling this endpoint is very similar to one on the backend. Internally, easy-rpc uses WebSockets to pass requests from the backend to the frontend."),gs=v(),V=c("p"),ae=d("Again we will first look at the backend."),bs=v(),os(I.$$.fragment),ks=v(),J=c("p"),le=d("On the frontend, we need to implement handlers for the offered endpoints."),_s=v(),os(q.$$.fragment),Ds=v(),R=c("p"),oe=d("Now both roles can send requests to each other."),this.h()},l(s){a=i(s,"H1",{id:!0});var n=B(a);f=i(n,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ns=B(f);p=i(ns,"SPAN",{class:!0}),B(p).forEach(e),ns.forEach(e),o=y(n,"Working with easy-rpc"),n.forEach(e),r=F(s),u=i(s,"P",{});var j=B(u);O=y(j,`After you set up an easy-rpc project or cloned a template/existing project it is very easy to get started working with easy-rpc.
If you followed the manual setup from the previous step you probably already have the Vscode extension installed or downloaded the transpiler binary. If this is not the case, make sure to `),X=i(j,"STRONG",{});var as=B(X);T=i(as,"A",{href:!0});var ls=B(T);js=y(ls,"setup the transpiler"),ls.forEach(e),as.forEach(e),Os=y(j," first."),j.forEach(e),Bs=F(s),E=i(s,"H2",{id:!0});var te=B(E);w=i(te,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Be=B(w);Z=i(Be,"SPAN",{class:!0}),B(Z).forEach(e),Be.forEach(e),Ts=y(te,".erpc"),te.forEach(e),ds=F(s),C=i(s,"P",{});var Ps=B(C);Ws=y(Ps,"The .erpc directory is where the actual magic happens. Whenever the running transpiler detects changes to your source files, it will generate the code required and put it into the "),z=i(Ps,"CODE",{});var de=B(z);Gs=y(de,".erpc/generated"),de.forEach(e),Hs=y(Ps," directory. You can import the generated clients from this directory, make calls on them or register handlers for incoming calls. The following examples refer to the manual setup from the previous section. If something is unclear, make sure to read it."),Ps.forEach(e),ys=F(s),g=i(s,"H2",{id:!0});var pe=B(g);b=i(pe,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var ye=B(b);K=i(ye,"SPAN",{class:!0}),B(K).forEach(e),ye.forEach(e),Ys=y(pe,"Backend"),pe.forEach(e),hs=F(s),m=i(s,"P",{});var U=B(m);Vs=y(U,"While setting up our project we configured two roles: \u201CFrontend\u201D and \u201CBackend\u201D. The first is a browser which has one endpoint, the second is an http-server which also has one endpoint. First we want to make sure that we can answer incoming requests on the backend. As you might remember, we declared a ping endpoint on the backend in our "),L=i(U,"CODE",{});var he=B(L);Js=y(he,"/webapp/sources/api.erpc"),he.forEach(e),Rs=y(U,", which takes a string parameter and returns a string: "),M=i(U,"CODE",{});var fe=B(M);Us=y(fe,"Backend ping(msg string) string"),fe.forEach(e),Xs=y(U,". Now lets implement the handler for this endpoint."),U.forEach(e),fs=F(s),ts(k.$$.fragment,s),vs=F(s),W=i(s,"P",{});var ve=B(W);Zs=y(ve,"If you run the app with the start script you should now see a console message which confirms the server is listening on the configured port."),ve.forEach(e),Fs=F(s),_=i(s,"H2",{id:!0});var re=B(_);D=i(re,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var Fe=B(D);Q=i(Fe,"SPAN",{class:!0}),B(Q).forEach(e),Fe.forEach(e),zs=y(re,"Frontend"),re.forEach(e),As=F(s),G=i(s,"P",{});var Ae=B(G);Ks=y(Ae,"Now we want to call the backend endpoint from the frontend."),Ae.forEach(e),us=F(s),ts($.$$.fragment,s),ms=F(s),H=i(s,"P",{});var ue=B(H);Ls=y(ue,"After starting the webapp and opening the browser, take a look at the console to see the reponse from the backend logged."),ue.forEach(e),Es=F(s),P=i(s,"H2",{id:!0});var ce=B(P);x=i(ce,"A",{"aria-hidden":!0,tabindex:!0,href:!0});var me=B(x);ss=i(me,"SPAN",{class:!0}),B(ss).forEach(e),me.forEach(e),Ms=y(ce,"Frontend endpoints"),ce.forEach(e),ws=F(s),N=i(s,"P",{});var xs=B(N);Qs=y(xs,"You might now wonder how you can use the second endpoint which we defined in the sources, the one on the frontend: "),es=i(xs,"CODE",{});var Ee=B(es);se=y(Ee,"Frontend ping(msg string) string"),Ee.forEach(e),ee=y(xs,". It too has one string parameter and a string return. But this time, the frontend is the role offering this endpoint."),xs.forEach(e),Cs=F(s),Y=i(s,"P",{});var we=B(Y);ne=y(we,"Calling this endpoint is very similar to one on the backend. Internally, easy-rpc uses WebSockets to pass requests from the backend to the frontend."),we.forEach(e),gs=F(s),V=i(s,"P",{});var Ce=B(V);ae=y(Ce,"Again we will first look at the backend."),Ce.forEach(e),bs=F(s),ts(I.$$.fragment,s),ks=F(s),J=i(s,"P",{});var ge=B(J);le=y(ge,"On the frontend, we need to implement handlers for the offered endpoints."),ge.forEach(e),_s=F(s),ts(q.$$.fragment,s),Ds=F(s),R=i(s,"P",{});var be=B(R);oe=y(be,"Now both roles can send requests to each other."),be.forEach(e),this.h()},h(){h(p,"class","icon icon-link"),h(f,"aria-hidden","true"),h(f,"tabindex","-1"),h(f,"href","#working-with-easy-rpc"),h(a,"id","working-with-easy-rpc"),h(T,"href","/easy-rpc-docs/2%F0%9F%9B%A0%EF%B8%8F%20Getting%20started/1Setup#vscode-extension"),h(Z,"class","icon icon-link"),h(w,"aria-hidden","true"),h(w,"tabindex","-1"),h(w,"href","#erpc"),h(E,"id","erpc"),h(K,"class","icon icon-link"),h(b,"aria-hidden","true"),h(b,"tabindex","-1"),h(b,"href","#backend"),h(g,"id","backend"),h(Q,"class","icon icon-link"),h(D,"aria-hidden","true"),h(D,"tabindex","-1"),h(D,"href","#frontend"),h(_,"id","frontend"),h(ss,"class","icon icon-link"),h(x,"aria-hidden","true"),h(x,"tabindex","-1"),h(x,"href","#frontend-endpoints"),h(P,"id","frontend-endpoints")},m(s,n){t(s,a,n),l(a,f),l(f,p),l(a,o),t(s,r,n),t(s,u,n),l(u,O),l(u,X),l(X,T),l(T,js),l(u,Os),t(s,Bs,n),t(s,E,n),l(E,w),l(w,Z),l(E,Ts),t(s,ds,n),t(s,C,n),l(C,Ws),l(C,z),l(z,Gs),l(C,Hs),t(s,ys,n),t(s,g,n),l(g,b),l(b,K),l(g,Ys),t(s,hs,n),t(s,m,n),l(m,Vs),l(m,L),l(L,Js),l(m,Rs),l(m,M),l(M,Us),l(m,Xs),t(s,fs,n),ps(k,s,n),t(s,vs,n),t(s,W,n),l(W,Zs),t(s,Fs,n),t(s,_,n),l(_,D),l(D,Q),l(_,zs),t(s,As,n),t(s,G,n),l(G,Ks),t(s,us,n),ps($,s,n),t(s,ms,n),t(s,H,n),l(H,Ls),t(s,Es,n),t(s,P,n),l(P,x),l(x,ss),l(P,Ms),t(s,ws,n),t(s,N,n),l(N,Qs),l(N,es),l(es,se),l(N,ee),t(s,Cs,n),t(s,Y,n),l(Y,ne),t(s,gs,n),t(s,V,n),l(V,ae),t(s,bs,n),ps(I,s,n),t(s,ks,n),t(s,J,n),l(J,le),t(s,_s,n),ps(q,s,n),t(s,Ds,n),t(s,R,n),l(R,oe),$s=!0},p(s,n){const ns={};n&2&&(ns.$$scope={dirty:n,ctx:s}),k.$set(ns);const j={};n&2&&(j.$$scope={dirty:n,ctx:s}),$.$set(j);const as={};n&2&&(as.$$scope={dirty:n,ctx:s}),I.$set(as);const ls={};n&2&&(ls.$$scope={dirty:n,ctx:s}),q.$set(ls)},i(s){$s||(rs(k.$$.fragment,s),rs($.$$.fragment,s),rs(I.$$.fragment,s),rs(q.$$.fragment,s),$s=!0)},o(s){cs(k.$$.fragment,s),cs($.$$.fragment,s),cs(I.$$.fragment,s),cs(q.$$.fragment,s),$s=!1},d(s){s&&e(a),s&&e(r),s&&e(u),s&&e(Bs),s&&e(E),s&&e(ds),s&&e(C),s&&e(ys),s&&e(g),s&&e(hs),s&&e(m),s&&e(fs),is(k,s),s&&e(vs),s&&e(W),s&&e(Fs),s&&e(_),s&&e(As),s&&e(G),s&&e(us),is($,s),s&&e(ms),s&&e(H),s&&e(Es),s&&e(P),s&&e(ws),s&&e(N),s&&e(Cs),s&&e(Y),s&&e(gs),s&&e(V),s&&e(bs),is(I,s),s&&e(ks),s&&e(J),s&&e(_s),is(q,s),s&&e(Ds),s&&e(R)}}}function Te(A){let a,f;const p=[A[0]];let o={$$slots:{default:[Oe]},$$scope:{ctx:A}};for(let r=0;r<p.length;r+=1)o=ie(o,p[r]);return a=new Ne({props:o}),{c(){os(a.$$.fragment)},l(r){ts(a.$$.fragment,r)},m(r,u){ps(a,r,u),f=!0},p(r,[u]){const O=u&1?Pe(p,[xe(r[0])]):{};u&2&&(O.$$scope={dirty:u,ctx:r}),a.$set(O)},i(r){f||(rs(a.$$.fragment,r),f=!0)},o(r){cs(a.$$.fragment,r),f=!1},d(r){is(a,r)}}}function We(A,a,f){return A.$$set=p=>{f(0,a=ie(ie({},a),ke(p)))},a=ke(a),[a]}class Ve extends _e{constructor(a){super(),De(this,a,We,Te,$e,{})}}export{Ve as default};
